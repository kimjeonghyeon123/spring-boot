1. 스프링의 진짜 핵심
  1) 스프링은 자바 언어 기반의 프레임워크
  2) 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크

2. 객체 지향 특징
  1) 추상화
  2) 캡슐화
  3) 상속
  4) 다형성
      - 역할과 구현으로 세상을 구분

3. 객체 지향 프로그래밍
  1) 컴퓨터 프로그램을 여러개의 독립된 단위, 즉 객체들의 모임으로 파악하고자 함
     각각의 객체는 메시지를 주고받고 데이터를 처리할 수 있다.(협력)
  2) 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어
     개발에 많이 사용

4. 역할과 구현을 분리
  1) 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다
  2) 장점
    - 클라이언트는 대상의 역할(인터페이스)만 알면 된다
    - 클라이언트는 구현 대상의 내부 구조를 몰라도 된다
    - 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다
    - 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다
  3) 자바 언어의 다형성을 활용
    - 역할 = 인터페이스
    - 구현 = 인터페이스를 구현한 클래스, 구현 객체
    - 객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는
      구현 객체 만들기
      
5. 객체의 협력이라는 관계부터 생각
  1) 혼자 있는 객체는 없다
  2) 클라이언트 : 요청, 서버 : 응답
  3) 수 많은 클라이언트와 객체 서버는 서로 협력 관계를 가진다

6. 자바 언어의 다형성
  1) 오버라이딩
    - 상속관계에 있는 클래스에서 상위 클래스의 메서드를 하위 클래스에서 
      재정의 하는 것
  2) 오버로딩
    - 이름이 같고 파라미터가 다른 메서드를 이용해 다양한 파라미터를 받을 
      수 있도록 함

7. 다형성의 본질
  1) 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다
  2) 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다

8. 역할과 구현을 분리
  1) 실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 
     가져올 수 있음
  2) 유연하고 변경이 용이
  3) 확장 가능한 설계
  4) 클라이언트에 영향을 주지 않는 변경 가능
  5) 인터페이스를 안정적으로 잘 설계하는 것이 중요
    - 인터페이스(역할) 자체가 변하면 큰 변경이 발생한다.

9. 스프링과 객체 지향
  1) 결국 다형성이 가장 중요!!!
  2) 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리
     하게 다룰 수 있도록 지원함

10. 좋은 객체 지향 설계의 5가지 원칙(SOLID)
  1) SRP: 단일 책임 원칙(single responsibility principle)
    - 한 클래스는 하나의 책임만 가져야 함
    - 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 지킨 것
  2) OCP: 개방-폐쇄 원칙 (Open/closed principle)
    - 소프트웨어 요소는 확장에는 열려있고 변경에는 닫혀 있어야 함
    - 다형성을 활용해 인터페이스를 구현한 새로운 클래스를 만들어 새로운 기능
      구현
    - 문제점
      - 구현 객체를 변경하려면 클라이언트 코드를 변경해야 함
      - 다형성을 사용했지만 OCP 원칙을 지킬 수 없다.
      - 객체를 생성하고 연관관계를 맺어주는 별도의 조립, 설정자가 필요
  3) LSP: 리스코프 치환 원칙 (Liskov substitution principle)
    - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 
      인스턴스로 바꿀 수 있어야 함
    - 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것
      - ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 
            뒤로 가게 구현하면 LSP 위반
  4) ISP: 인터페이스 분리 원칙 (Interface segregation principle)
    - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
    - 인터페이스가 명확해지고, 대체 가능성이 높아짐
    - ex) 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
  5) DIP: 의존관계 역전 원칙 (Dependency inversion principle)
    - 추상화에 의존하고 구체화에 의존하면 안된다.
    - 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻.
  6) 정리
    - 다형성만으로는 OCP, DIP를 지킬 수 없음, 뭔가 더 필요함

11. 스프링
  1) 스프링은 다음 기술로 OCP, DIP를 가능하게 지원
    - DI(Dependency Injection) : 의존관계, 의존성 주입
    - DI 컨테이너 제공
  2) 클라이언트의 코드 변경 없이 기능 확장
  3) 쉽게 부품 교체하듯이 개발
  