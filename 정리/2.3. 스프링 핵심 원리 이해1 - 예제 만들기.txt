1. 자바 enum 클래스
  1) 흔히 상수를 정의할 때 final static string 과 같은 방식으로 상수를 정의
  2) 위와 같이 정의하면 다양한 문제 발생
  3) 문제를 해결하기 위해 enum 클래스 사용
  4) 열거형이라고 불리며, 서로 연관된 상수들의 집합을 의미
  5) 장점
    - 코드가 단순해지며, 가독성이 좋습니다.

2. OCP 위반
  1) DiscountPolicy 인터페이스
    - RateDiscountPolicy 클래스, FixDiscountPolicy 클래스가 상속받고 있음
  2) OrderServiceImpl에서 할인 정책을 변경할 때 직접 변경하는 문제 발생
    - ex)
      private final DiscountPolicy discountPolicy = new FixDiscountPolicy();
                                  <--> 
      private final DiscountPolicy discountPolicy = new RateDiscountPolicy();
          -----> OCP 위반
  3) 이 문제를 해결하기 위해 별도의 구현 객체 생성 및 연결하는 책임을 가지는
     설정 클래스를 만듦

3. @BeforeEach
  1) 각 테스트를 실행하기 전에 호출됨
  
4. AppConfig
  1) AppConfig 를 보면 역할과 구현 클래스가 한눈에 들어온다. 
     애플리케이션 전체 구성이 어떻게 되어있는지 빠르게 파악할 수 있다.
  2) 사용 효과
    - SRP 단일 책임 원칙
      - 클라이언트 객체는 실행만 담당
      - 구현 객체를 생성하고 연결하는 책임은 AppConfig가 담당
    - DIP 의존관계 역전 원칙
      - 추상화에만 의존하도록 AppConfig에서 의존관계를 주입했다.
    - OCP 개방 폐쇄 원칙
      - 소프트웨어 요소를 새롭게 확장해도 사용 영역의 변경은 닫혀 있다.

5. IoC, DI, 그리고 컨테이너
  1) 제어의 역전(IoC : Inversion Of Control)
    - 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 
      생성하고, 연결하고, 실행했다. 
    - 한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종
    - 반면에 AppConfig가 등장한 이후에 구현 객체는 자신의 로직을 실행하는 
      역할만 담당한다. 프로그램의 제어 흐름은 이제 AppConfig가 가져간다.
      ex) OrderServiceImpl 은 필요한 인터페이스들을 호출하지만 어떤 구현
          객체들이 실행될지 모른다. 
    - 프로그램에 대한 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다
    
    - 제어의 역전(IoC) 정의
      - 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것
  
  2) 프레임워크 vs 라이브러리
    - 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 
      프레임워크가 맞다. (JUnit)
    - 반면에 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 
      프레임워크가 아니라 라이브러리다.

  3) 의존관계 주입 DI(Dependency Injection)
    - OrderServiceImpl 은 DiscountPolicy 인터페이스에 의존한다. 실제 어떤 
      구현 객체가 사용될지는 모른다.
    - 의존관계는 정적인 클래스 의존 관계와, 실행 시점에 결정되는 
      동적인 객체(인스턴스) 의존 관계 둘을 분리해서 생각해야 한다.
      - 정적인 클래스 의존관계
        - 클래스가 사용하는 import 코드만 보고 의존관계를 쉽게 판단할 수 있다
        - 클래스 의존관계 만으로는 실제 어떤 객체가 OrderServiceImpl에
          주입 될지 알 수 없다.
      - 동적인 객체 인스턴스 의존 관계
        - 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 
          의존 관계다.
        - 애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 
          클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결 되는 
          것을 의존관계 주입이라 한다.
        - 클라이언트 코드를 변경하지 않아도 되고, 정적인 클래스 의존관계를  
          변경하지 않아도 된다.

  4) IoC 컨테이너, DI 컨테이너
    - AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을
      IoC 컨테이너 또는 DI 컨테이너라 한다. 주로 DI 컨테이너라 함
    - 어샘블러, 오브젝트 팩토리 등으로 불리기도 한다.

  5) 스프링 컨테이너
    - ApplicationContext를 스프링 컨테이너라고 한다.
    - 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정 정보로 사용함
    - @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에
      등록함. 이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 함
    - 스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾음
    
